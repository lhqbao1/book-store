import { createAsyncThunk, createSlice } from '@reduxjs/toolkit';

/** *
carts = [
    { quantity: 1, _id: 'abc', detail: { _id: 'abc', name: 'def' } },
    { quantity: 1, _id: '123', detail: { _id: '123', name: '456' } }
]
*
*/

const initialState = {
    carts: [
    ]
};

export const orderSlice = createSlice({
    name: 'order',
    initialState,
    // The `reducers` field lets us define reducers and generate associated actions
    reducers: {
        doAddBookAction: (state, action) => {
            let carts = state.carts;
            const item = action.payload;


            let isExisIndex = carts.findIndex(c => c._id === item._id);

            if (isExisIndex > -1) {
                carts[isExisIndex].quantity = carts[isExisIndex].quantity + item.quantity;
                if (carts[isExisIndex].quantity > carts[isExisIndex].detail.quantity) {
                    carts[isExisIndex].quantity = carts[isExisIndex].detail.quantity
                }
            } else {
                carts.push({ quantity: item.quantity, _id: item._id, detail: item.detail })
            }
            //update redux
            state.carts = carts; //immer //modify state of redux
        },
        doUpdateQuantityAction: (state, action) => {
            let carts = state.carts;
            const item = action.payload;


            let isExisIndex = carts.findIndex(c => c._id === item._id);

            if (isExisIndex > -1) {
                carts[isExisIndex].quantity = item.quantity;
                if (carts[isExisIndex].quantity > carts[isExisIndex].detail.quantity) {
                    carts[isExisIndex].quantity = carts[isExisIndex].detail.quantity
                }
            } else {
                carts.push({ quantity: item.quantity, _id: item._id, detail: item.detail })
            }
            //update redux
            state.carts = carts; //immer //modify state of redux
        },
        doDeleteCartAction: (state, action) => {

            //update redux
            state.carts = state.carts.filter(c => c._id !== action.payload._id); //immer //modify state of redux
        },
        doResetCart: (state, action) => {

            //update redux
            state.carts = []; //immer //modify state of redux
        },

    },
    // The `extraReducers` field lets the slice handle actions defined elsewhere,
    // including actions generated by createAsyncThunk or in other slices.
});

export const { doAddBookAction, doUpdateQuantityAction, doDeleteCartAction, doResetCart } = orderSlice.actions;

export default orderSlice.reducer;
